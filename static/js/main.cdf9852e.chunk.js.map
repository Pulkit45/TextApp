{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toogleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","map","elem","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","charAt","capitalize","msg","prototype","PropTypes","string","isRequired","aboutText","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cdf9852e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n         \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ?'dark':'light '}`}>\r\n          <input className=\"form-check-input\" onClick={props.toogleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n           </div>\r\n           \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.prototype ={title:PropTypes.string.isRequired,\r\n                aboutText:PropTypes.string.isRequired,}\r\n \r\n Navbar.defaultProps={\r\n     title:\"Set title here\",\r\n     aboutText:\"Set About text here\"\r\n };               \r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to uppercase','success')\r\n    }\r\n    const handleLoClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert('Converted to lowercase','success')\r\n    }\r\n    const handleTitleClick=()=>{\r\n        var newText=text.toLowerCase().split(\" \").map((elem)=>{\r\n            return elem[0].toUpperCase() + elem.slice(1)\r\n        })\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('Title case','success')\r\n        \r\n    }\r\n    const handleCopy=()=>{\r\n        var text=document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText= text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('Extra spaces cleared','success')\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n        let newText='';\r\n        setText(newText)\r\n        props.showAlert(\"Clear text\",\"success\")\r\n       \r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText]=useState('');\r\n    // text=\"new text\"; wrong way to change the value of text\r\n    // setText=\"new text\"; right way\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode === 'dark' ?'white':'#042743'}}>\r\n            \r\n      <h1 >{props.heading} </h1>\r\n     <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === 'dark' ?'grey':'white',color:props.mode === 'dark' ?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n     </div>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Upercase</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleTitleClick}>Title Case</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            \r\n        </div>\r\n        <div className=\"conatiner my-3\" style={{color:props.mode === 'dark' ?'white':'#042743'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length } Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something in the textbox above to preview it here\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            \r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n          </div>\r\n        \r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =((message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n\n    },1500)\n\n  })\n\n   const toogleMode=()=>{\n     if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor =\"#042743\";\n      showAlert('Dark mode has been enabled','success');\n      document.title ='TextApp -Dark Mode';\n\n     }else{\n       setMode('light');\n       document.body.style.backgroundColor =\"white\";\n       showAlert('Light mode has been enabled','success');\n       document.title ='TextApp -Light Mode';\n     }\n    \n\n  } \n\n  return (\n     <>\n     {/* <Router> */}\n     <Navbar title=\"TextApp\" aboutText=\"About \" mode={mode} toogleMode={toogleMode}/>\n     <Alert alert={alert}/>\n       <div className=\"container my-3\">\n       {/* <Routes>\n          <Route exact path=\"/about\" element={ <About />}/>       */}\n          {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>}/>\n        </Routes> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n       </div>\n       {/* </Router> */}\n       \n\n     \n     \n     </>\n\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}